#+TITLE: LAMP Stack Set-Up Notes
#+AUTHOR: Alexander Neville

The *LAMP* stack is a common web server stack, standing for:

1. Linux (any distrobution of GNU/Linux)
2. Apache (a common webserver program)
3. Mysql (a type of SQL database server)
4. PHP (a web scripting and programming language)

This guide covers how to set-up each of these pieces of software on a single machine with a view to hosting PHP or static web applications.

* Contents :TOC:
- [[#apache][Apache]]
  - [[#installation][Installation]]
  - [[#firewall-set-up][Firewall Set-up]]
- [[#php][PHP]]
  - [[#ubuntu][Ubuntu]]
  - [[#arch][Arch]]
  - [[#check-configuration][Check Configuration]]
- [[#permissions][Permissions]]
- [[#database][Database]]
  - [[#install][Install]]
  - [[#creating-users][Creating Users]]
  - [[#assigning-roles][Assigning Roles]]
  - [[#importing-and-exporting][Importing and Exporting]]
- [[#example-laravel-deployment][Example Laravel Deployment]]
  - [[#install-composer][Install Composer]]
  - [[#install-laravel][Install Laravel]]
  - [[#create-laravel-project][Create Laravel Project]]
  - [[#setting-up-virtual-hosts][Setting up Virtual Hosts]]

* Apache
** Installation

*Ubuntu:*

Install apache and enable it with systemd.

#+begin_src sh

sudo apt install apache2
sudo systemctl enable --now apache2

#+end_src

*Arch:*

Package is called 'apache' in arch repos and service is called /httpd/.

#+begin_src shell

sudo pacman -S apache php php-apache
sudo systemctl enable --now httpd

#+end_src

** Firewall Set-up

Configure the firewall if needed, with iptables (ufw may not be installed)

#+begin_src sh

sudo iptables -I INPUT 6 -m state --state NEW -p tcp --dport 80 -j ACCEPT
sudo apt-get install iptables-persistent
sudo netfilter-persistent save

#+end_src

* PHP
** Ubuntu

Install php and some common extensions


#+begin_src sh

sudo apt install php
sudo apt install openssl php-common php-curl php-json php-mbstring php-mysql php-xml php-zip

#+end_src

** Arch

Install common extensions with =php-extension_name=

#+begin_src shell

sudo pacman -S php php-apache

#+end_src

Uncomment these lines in =/etc/php/php.ini=

#+begin_src

extension=pdo_mysql
extension=mysqli

#+end_src

Comment and uncomment in =/etc/httpd/conf/httpd.conf= respectively:

#+begin_src

#LoadModule mpm_event_module modules/mod_mpm_event.so
LoadModule mpm_prefork_module modules/mod_mpm_prefork.so

#+end_src

Append to the end of the /LoadModule/ section of the config file:

#+begin_src

LoadModule php_module modules/libphp.so
AddHandler php-script .php

#+end_src

Also append to the end of the /Include/ section:

#+begin_src

Include conf/extra/php_module.conf

#+end_src

** Check Configuration

Create an =info.php= in your document root to verify that the installation is working:

#+begin_src php

<?php

phpinfo();

?>

#+end_src

* Permissions

There are many ways to have permission over the document root and its contents. Oracle reccomends adding yourself to the group the webserver runs as and chowning/chmodding the files as appropriate. On ubuntu, apache runs as =www-data=, although different configs may have a different user.

#+begin_src sh

sudo adduser $USER www-data
sudo chown -R www-data:www-data /var/www/html
sudo chmod -R g+rw /var/www/html

#+end_src

* Database
** Install

*Ubuntu:*

#+begin_src sh

sudo apt install mysql-server
sudo systemctl enable --now mysql
sudo mysql_secure_installation

#+end_src

*Arch*:

Mariadb is a drop-in replacement for mysql.

#+begin_src shell

sudo pacman -S mariabd
mariadb-install-db --user=mysql --basedir=/usr --datadir=/var/lib/mysql
sudo systemctl enable --now mariadb
sudo mysql_secure_installation

#+end_src

** Creating Users

Having run the =mysql_secure_installation= script, you will have set a root password.
If logging in as root is giving you difficulty, log in like this ...

#+begin_src sh

sudo mysql -u root

#+end_src

... and alter the user like this.

#+begin_src sql

ALTER USER 'root'@'localhost' IDENTIFIED WITH mysql_native_password BY 'password';

#+end_src

To create other users:

#+begin_src sql

CREATE USER 'username'@'localhost' IDENTIFIED BY 'password';

-- eg:

CREATE USER 'root'@'localhost' IDENTIFIED BY 'password';
CREATE USER 'wordpress'@'localhost' IDENTIFIED BY 'password';

#+end_src

** Assigning Roles

#+begin_src sql

GRANT ALL PRIVILEGES ON database.table TO 'newuser'@'localhost';
GRANT ALL PRIVILEGES ON chatter.* TO 'php'@'localhost';
GRANT ALL PRIVILEGES ON wordpress_data.* TO 'wordpress'@'localhost';

#+end_src

Make sure to reload the privilege tables:

#+begin_src sql

FLUSH PRIVILEGES;

#+end_src

** Importing and Exporting

#+begin_src sh

mysqldump -u [username] -p [database-you-want-to-dump] > [path-to-place-data-dump]
mysql -u [username] -p newdatabase < [database name].sql

#+end_src

* Example Laravel Deployment

Laravel is a PHP framework for building modern web applications. To deploy a laravel application, a *LAMP* stack is needed. Luckily we have just set that up!

** Install Composer

Composer is a dependency manager for php, get more info here: https://getcomposer.org/
Here are the download steps:

#+begin_src sh

php -r "copy('https://getcomposer.org/installer', 'composer-setup.php');"
php -r "if (hash_file('sha384', 'composer-setup.php') === '756890a4488ce9024fc62c56153228907f1545c228516cbf63f885e036d37e9a59d27d63f46af1d4d07ee0f76181c7d3') { echo 'Installer verified'; } else { echo 'Installer corrupt'; unlink('composer-setup.php'); } echo PHP_EOL;"
php composer-setup.php
php -r "unlink('composer-setup.php');"

#+end_src

This will download =composer.phar= in the current directory. It would be handy to make this available globaly, so put it somewhere in your path. If you have root privileges, try this:

#+begin_src shell

sudo mv ./composer.phar /usr/bin/composer

#+end_src

Verify that this worked, by printing the location of the composer command (where it exists on your path):

#+begin_src shell

which composer

#+end_src

** Install Laravel

With composer installed, we can install laravel globally. This will install the *laravel installer* into some /unkown/ directory.

#+begin_src shell

composer global require laravel/installer

#+end_src

To find where composer installs these global dependencies, run the command shown below. The path to the dependencies will be shown on the line beginning with =[home]=. (this will likely be =$HOME/.config/composer/vendor/bin=) To use laravel (or anything else installed like this), its location will have to be added to our path. It is a good idea to add the composer global install directory to your path so that you can use every dependency you choose to install globally, without the need to type a full path every time.

#+begin_src shell

composer config --list --global

#+end_src

Once you have found the install directory, append the relevant directory path to your =$PATH= environment variable. To do this, add this line to the end of your =~/.bashrc=

#+begin_src shell

export PATH=$PATH:$HOME/.config/composer/vendor/bin

#+end_src

Start a new shell for this change to take effect. Once done, verify Laravel is installed like this:

#+begin_src shell

which laravel

#+end_src

** Create Laravel Project

Having globally installed Laravel, a new app needs to be created / deployed in a directory known to the webserver. On ubuntu =/var/www/html= is a good place to do this. Use git to clone an existing project or use the =laravel new= command in this directory. eg.

#+begin_src shell

git clone https://github.com/username/repo.git
laravel new <project_name>

#+end_src

** Setting up Virtual Hosts

Laravel uses the *MVC* layout and so only the contents of the =public= directory should be inside the document root of the webserver. To make sure this is the case create a new virtual host file for the project and disable the old vhost. The changes will have to made within the config directory of the apache webserver.

#+begin_src sh

cd /etc/apache2/sites-available

#+end_src

Within this directory create a new vhost file, ending in =.conf=. Open this file in your favourite text editor, nano is usually installed.

#+begin_src shell

sudo nano project_name.conf

#+end_src

Add the following lines, changing the relevant pieces of information to reflect your set-up

#+begin_src

<VirtualHost *:80>
   ServerName {{server-ip-address}}
   ServerAdmin webmaster@thedomain.com
   DocumentRoot /var/www/html/{{folder_name}}/public

   <Directory /var/www/html/{{folder_name}}
       AllowOverride All
   </Directory>
   ErrorLog ${APACHE_LOG_DIR}/error.log
   CustomLog ${APACHE_LOG_DIR}/access.log combined
</VirtualHost>

#+end_src

Now we need to stop using the default virtual host config and use the new one we just made. Use apache's *dissite* and *ensite* commands, again substitute the name of the file you just made into these commands. The *dissite* command shown below assumes that you were previously using the default vhost config.

#+begin_src shell

sudo a2dissite 000-default.conf
sudo a2ensite new_vhost_name.conf

#+end_src

Enable the rewrite mod for apache:

#+begin_src shell

sudo a2enmod rewrite

#+end_src

Finally restart the webserver to make those changes take effect.

#+begin_src shell

sudo systemctl restart apache2

#+end_src

